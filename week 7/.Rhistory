install.packages(<comma_separated package names>, dependencies = TRUE)
install.packages(“plyr”, “dplyr”, dependencies = TRUE)
"install.packages(“plyr”, “dplyr”, dependencies = TRUE):
source('~/R/new.R')
is.integer(a)
is.numeric(a)
typeof(a)
typeof(1)
as.integer(a)
typeof(a)
as.complex(2)
as.numeric("a")
as.logical(a)
print(x)
source('~/.active-rstudio-document')
print(X)
source('~/.active-rstudio-document')
x=c(2.3,4.5,6.7,7.8)
print(x)
x=c(2.3,4.5,7.8,6.5)
print(x)
print(emp.list)
5858
#list example
id=c(1,2,3,4)
emp.name=c("man","rag","sha","din")
num.emp=4
emp.list=list(id.emp.name,nu.emp)
print(emp.list)
num.emp=4
emp.list=list(id,emp.name,nu.emp)
emp.list=list(id,emp.name,num.emp)
print(emp.list)
#list example
id=c(1,2,3,4)
emp.name=c("man","rag","sha","din")
num.emp=4
emp.list=list(id,emp.name,num.emp)
print(emp.list)
source('~/R/list.R')
source('~/R/list.R')
emp=(id,emp.name,num.emp)
source('~/R/list.R')
source('~/R/list.R')
source('~/R/list.R')
source('~/R/list.R')
source('~/R/list.R')
print(emp.list$names)
print(emp.list[[1]])
print(emp.list[[2]])
print(emp.list[[1]][1])
print(emp.list[[2]][1])
print(emp.list[[2]][2])
print(emp.list[[2]][3])
print(emp.list$no)
emp.list=list("no"=id,
"names"=emp.name,
"total staff"=num.emp)
print(emp.list$no)
source('~/R/list.R')
source('~/R/list.R')
source('~/R/list.R')
source('~/R/list.R')
print(emp.list$no)
print(emp.list[[1]])#(1,2,3,4)
print(emp.list[[1]])#(1,2,3,4)
print(emp.list[[2]])#emp.name
print(emp.list[[1]][1])#answer is 1
print(emp.list[[2]][1])#2 il 1 "man"
emp.list["total staff"]=5
emp.list[[2]][5]="nir"
emp.list[[1]][5]=5
print(emp.list)
print(emp.list no)
print(emp.list[[1]])#(1,2,3,4)
print(emp.list[[2]])#emp.name
print(emp.list[[3]])#emp.name
print(emp.list[[1]][1])#answer is 1
print(emp.list[[1]])#(1,2,3,4)
print(emp.list[[3]])#emp.name
print(emp.list[[4]])#emp.name
emp.list["total staff"]=5
emp.list[[2]][5]="nir"
emp.list[[1]][5]=5
print(emp.list)
source('~/R/list.R')
source('~/R/list.R')
source('~/R/list.R')
emp.ages=list("ages"=c(23,44,55,66,77))
emp.list=c(emp.list,emp.ages)
print(emp.list)
emp.ages=list("ages"=c(23,44,55,66,77))
emp.list=c(emp.ages)
print(emp.list)
emp.ages=list("ages"=c(23,44,55,66,77))
emp.list=c(emp.list,emp.ages)
print(emp.list)
source('~/R/list.R')
emp.ages=list("ages"=c(23,44,55,66,77))
emp.list=c(emp.list,emp.ages)
print(emp.list)
source('~/R/data frames.R')
View(mytable)
source('~/R/data frames.R')
source('~/R/data frames.R')
load("~/R/.RData")
source('~/R/data frame/vol.R', echo=TRUE)
source('~/R/data frame/vol.R', echo=TRUE)
source('~/R/data frame/vol.R', echo=TRUE)
volcy=function(dia,len){
vol=(pi*dia^2)*len/4
surf_area=pi*dia*len
result=list("vol"=vol,"surf_area" =surf_area)
return (result)
}
source('~/R/data frame/vol.R', echo=TRUE)
source('~/R/data frame/vol.R', echo=TRUE)
source('~/R/data frame/vol.R', echo=TRUE)
source('~/R/data frame/vol.R', echo=TRUE)
source('~/R/data frame/vol.R', echo=TRUE)
source('~/R/data frame/vol.R', echo=TRUE)
source('~/R/data frame/vol.R', echo=TRUE)
volcy=function(dia,len){
vol=(pi*dia^2)*len/4
surf_area=pi*dia*len
result=list("vol"=vol,"surf_area" =surf_area)
return (result)
}
source('~/R/data frame/vol.R', echo=TRUE)
result=volcy(10,5)
source('~/R/data frame/vol.R', echo=TRUE)
source('~/R/data frame/vol.R', echo=TRUE)
source('~/R/data frame/vol.R', echo=TRUE)
result=volcy(10,5)
result["vol"]
source('~/R/data frame/vol.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
a=matrix(1:9,3,3)
a
apply(a,1,sum)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
x=1:10
x=1:10
y=x^2
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
a
a=matrix(c(-4,2,2,4),nrow=2,ncol = 2,byrow=T)
a
a
a
a=matrix(c(-4,2,2,4),nrow=2,ncol = 2,byrow=T)
a
eigen(a)$values
eigen(a)
a=matrix(c(-4,2,2,4),nrow=2,ncol = 2,byrow=T)
a
eigen(a)
setwd("C:/Users/Lenovo/Downloads/DATA SCIENCE FOR ENGINEERS/week 7")
auto =read.csv("auto_mpg.csv")
view(auto)
View(auto)
View(auto)
View(auto)
lin=lm(mpg~.,data="auto")
lin=lm(formula=mpg ~.,data="auto")
model=lm(formula=mpg~.,data="auto")
model=lm(formula=mpg~.,data=auto)
model=lm(mpg~.,data=auto)
summary(model)
model=lm(formula=mpg~.,data=auto)
summary(model)
auto =read.csv("auto_mpg.csv")
View(auto)
model=lm(formula=mpg~.,data=auto)
model=lm(formula=mpg ~.,data=auto)
auto =read.csv("auto_mpg.csv",row.names = 1)
View(auto)
model=lm(formula=mpg ~.,data=auto)
model=lm(formula=mpg~,data=auto)
summary(model)
model=lm(formula=mpg~., data=auto)
auto =read.csv("auto_mpg.csv")
View(auto)
model=lm(auto$mpg~ .,data=auto)
View(auto)
auto =read.csv("auto_mpg.csv")
View(auto)
setwd("C:/Users/Lenovo/Downloads/DATA SCIENCE FOR ENGINEERS/week 7")
auto =read.csv("auto.csv")
View(auto)
model=lm(mpg~ .,data=auto)
model=lm( mpg~ .,data=auto)
head(auto)
("auto.csv")
("auto.csv")
("auto.csv")
View(auto)
head(auto)
model=lm(ï..mpg~ .,data=auto)
summary(model)
model1=lm(ï..mpg~ weight+model_year,data=auto)
summary(model1)
load("C:/Users/Lenovo/Downloads/DATA SCIENCE FOR ENGINEERS/week 7/auto.csv")
model=lm(ï..mpg~cylinders+horsepower+weight+model_year ,data=auto)
summary(model)
train=read.csv("Titanic_Train.csv")
View(train)
train=read.csv("Titanic_Train.csv")
test=read.csv("Titanic_Test.csv")
View(train,test)
modelt=lm(Survived~.,data=train)
summary(modelt)
modelt=glm(Survived~.,data=train)
summary(modelt)
modelt=glm(Survived~.,family="binomial",data=train)
summary(modelt)
logpredict=predict(modelt,newdata = test,type="response")
test[logpredict<=0.5,"logpredict"]=0
test[logpredict>0.5,"logpredict"]=1
test$Survived=as.factor(test$Survived)
test$logpredict=as.factor(test$logpredict)
test$Survived=as.factor(test$Survived)
test$ï..Survived =as.factor(test$ï..Survived)
test$logpredict=as.factor(test$logpredict)
logpredict=predict(modelt,newdata = test,type="response")
test[logpredict<=0.5,"logpredict"]="0"
test[logpredict>0.5,"logpredict"]="1"
test$Survived =as.factor(test$Survived)
test$ï..Survived =as.factor(test$ï..Survived)
test$logpredict=as.factor(test$logpredict)
confusionMatrix(test$logpredict,test$ï..Survived)
confusionMatrix(test$logpredict,test$ï..Survived,positive="1")
>confusionMatrix(test$logpredict,test$ï..Survived,positive="1")
>confusionMatrix(test$logpredict,test$ï..Survived,positive="1")
library(caret)
logpredict=predict(modelt,newdata = test,type="response")
test[logpredict<=0.5,"logpredict"]="0"
test[logpredict>0.5,"logpredict"]="1"
test$Survived =as.factor(test$Survived)
test$ï..Survived =as.factor(test$ï..Survived)
test$logpredict=as.factor(test$logpredict)
confusionMatrix(test$logpredict,test$ï..Survived,positive="1")
View(test)
View(train)
